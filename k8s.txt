
---------------------------pv  pvc-------------------------------------------

删除pv  kubectl patch pv xxx -p '{"metadata":{"finalizers":null}}'

-----------------------------------------------------------------------------

---------------------------  pod -------------------------------------------
kubectl delete pod <name> --grace-period=0 --force -n <namespace>
----------------------------------------------------------------------------

-----------------------------------------------------------------------------

删除所有容器 docker rm $(docker ps -aq)

-----------------------------k8s 节点操作----------------------------------------

查看k8s的api资源类型 kubectl api-resources

查看k8s资源对象拥有的字段 kubectl explain <资源名对象名>

给节点添加标签 kubectl label nodes 10.18.127.4 node=kube-node

给节点修改标签 kubectl label nodes 10.18.127.4 node=kube-node --overwrite

删除节点标签 kubectl label nodes 10.18.127.4 node-

pod 强制删除(确定控制器被删除) kubectl -n <namespace> delete pod <pod-name> --force --grace-period=0

修复节点调度  kubectl patch node 10.18.127.4 -p '{"spec":{"unschedulable":false}}'

修改节点的ROLE(node->master) kubectl label node 10.18.127.3 --overwrite kubernetes.io/role=master

job扩容 kubectl scale  --replicas=$N jobs/myjob

statefulsets扩容 kubectl scale statefulset <sts> --replicas=4

滚动更新RC kubectl rolling-update my-nginx --image=nginx:1.9.1

更新sts镜像(statefulset) kubectl set image statefulset web nginx=nginx-slim:0.7

---------------------------------------------------------------------------------

查看pod日志  kubectl log mysql-77b495b4fd-pjw2w


--------------------------------docker用户---------------------------------------
1、新建用户组docker之前，查看用户组中有没有docker组，如果已经存在，则不需要再进行创建

sudo cat /etc/group | grep docker

2、创建docker分组，并将相应的用户添加到这个分组里面（999为组id，可以不指定）

sudo groupadd -g  docker

sudo usermod -aG dockerroot test

sudo usermod -aG docker test

3、检查一下创建是否创建成功

cat /etc/group | grep test

4、退出当前用户登陆状态，然后重新登录，以便让权限生效,或重启docker-daemon

sudo systemctl restart docker

5、确认你可以直接运行docker命令，执行docker命令

docker  info

如果出现以下提示，则需要/var/run/docker.sock权限

Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/info: dial unix /var/run/docker.sock: connect: permission denied

sudo chmod a+rw /var/run/docker.sock

------------------------------查看docker进程调用关系-----------------------------
containerd的目录：/var/run/docker/containerd/containerd.toml

debug 保存目录：/var/run/docker/containerd/containerd-debug.sock

docker run -id ubuntu bash

ps fxa|grep docker -A 1



---------------------------------------------------------------------------------

---------------------------docker开启2375端口，提供外部访问docker----------------------

编辑docker文件：/etc/systemd/system/docker.service 或者 /usr/lib/systemd/system/docker.service

vim /etc/systemd/system/docker.service

修改ExecStart为下面内容
ExecStart=/opt/kube/bin/dockerd  -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock

重新加载docker配置
//1.加载docker守护进程
systemctl daemon-reload
//2.重启docker
systemctl restart docker

测试端口：
curl 127.0.0.1:2375/version

得到类似输出：
{"Platform":{"Name":"Docker Engine - Community"},"Components":[{"Name":"Engine","Version":"18.09.2","Details":{"ApiVersion":"1.39","Arch":"amd64","BuildTime"
:"2019-02-10T04:20:28.000000000+00:00","Experimental":"false","GitCommit":"6247962","GoVersion":"go1.10.6","KernelVersion":"3.10.0-957.27.2.el7.x86_64","MinAPIVersion":"1.12","Os":"linux"}}],"Version":"18.09.2","ApiVersion":"1.39","MinAPIVersion":"1.12","GitCommit":"6247962","GoVersion":"go1.10.6","Os":"linux","Arch":"amd64","KernelVersion":"3.10.0-957.27.2.el7.x86_64","BuildTime":"2019-02-10T04:20:28.000000000+00:00"}

# v1.39 docker API version
#请求dockerd创建容器，但由于dockerd在本地找不到相应的image，于是返回失败
curl 127.0.0.1:2375/v1.39/containers/create  -X POST -H "Content-Type: application/json" -d '{"Image": "hello-world"}'
{"message":"No such image: hello-world:latest"}

#请求dockerd去找registry服务器拿image
#这里的http应答中的内容包含了很多跟进度条相关的内容
curl '127.0.0.1:2375/v1.39/images/create?fromImage=hello-world&tag=latest' -X POST

/etc/resolv.conf 修改dns服务器

---------------------------------------------------------------------------------------

----------------------------------scratch镜像本地构建----------------------------------------

 tar cv --files-from /dev/null | docker import - scratch
 
---------------------------------------------------------------------------------------------

-------------------------------Docker无法启动 error initializing graphdriver: driver not supported--------------------------------
systemctl status docker

# Error starting daemon: error initializing graphdriver: driver not supported

解决办法:
在/etc/docker/daemon.json目录下，编辑如下内容：
{
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}

再次启动
systemctl start docker

----------------------------------------------------------------------------------------------------------------------------------

--------------------------------私有仓库-----------------------------------------

查看私有仓库镜像 curl http://10.18.127.1:5000/v2/_catalog

查看私有仓库镜像标签 curl http://10.18.127.1:5000/v2/busybox/tags/list

私有仓库客户端添加HTTP 请求
/etc/docker/daemon.json
{"insecure-registries": ["10.18.127.2:5000"],}

systemctl restart docker

journalctl -xe  查看出错原因
查看配置文件(一般是配置文件冲突)
vim /etc/systemd/system/docker.service 


删除私有仓库镜像（仅元数据）  curl -v -X DELETE 
http://10.18.127.1:5000/v2/tensorflow-1.13.1-notebook-cpu/manifests/sha256:5b32df24b3bb2b8692ed1e73fc240ac702d479d1e9cd141024099ec018184512

运行私有镜像(可删除)

docker run -itd \
 -v /data/registry:/var/lib/registry \
 -p 5000:5000 \
 --restart=always \
 -e REGISTRY_STORAGE_DELETE_ENABLED=true \
 --name registry registry:2.7


删除私有镜像（垃圾回收遗留镜像数据）
# docker exec -it registry  sh
# cd /var/lib/
# du -sh registry/
# registry garbage-collect /etc/docker/registry/config.yml
# du -sh registry/
# exit

------------------------------------------------------------------------------------


----------------------------------------------------harbor 私有仓库------------------------------------------------------

安装harbor过程：

1、安装底层需求：
 python应该是2.7或更高版本
 Docker引擎应为1.10或更高版本
 Docker Compose需要为1.6.0或更高版本

 docker-compose:

 curl -L https://github.com/docker/compose/releases/download/1.9.0/docker-compose-`uname -s`-`uname -m`

 >/usr/local/bin/docker-compose

 2、harbor安装：harbor官方地址：https://github.com/vmware/harbor/releases
 
 2.1 解压软件包： tar -xvf harbor-offline-installer-<version>.tgz https://github.com/vmware/harbor/releases/download/v1.2.0/harbor-offline-installer-v1.2.0.tgz

 2.2 配置 : harbor.cfg
  a、必选参数 、 hostname：目标的主机名或者完全限定域名 ： ui_url_protocol：http或https。默认为 。 http db_password：用于 ： db_auth的MySQL数据库的根密码。更改此密码进行任何生产用途 数 max_job_workers：（默认值为 ： 3）作业服务中的复制工作人员的最大数量。对于每个映像复制作业， ） 工作人员将存储库的所有标签同步到远程目标。增加此数字允许系统中更多的并发复制作业。但是，由于每个工 工作人员都会消耗一定数量的网络 作 / CPU/IO资源，请根据主机的硬件资源，仔细选择该属性的值 资 customize_crt：（： on或off。默认为 。 on）当此属性打开时， ） prepare脚本将为注册表的令牌的生成 脚 /验证创 验 建私钥和根证书 建 ssl_cert：SSL证书的路径，仅当协议设置为 证 https时才应用 时 ssl_cert_key：SSL密钥的路径，仅当协议设置为 密 https时才应用 时 secretkey_path：用于在复制策略中加密或解密远程注册表的密码的密钥路径

 2.3 创建 https 证书以及配置相关目录权限
 mkdir -p /data/cert
 cd /data/cert

 openssl genrsa -des3 -out server.key 2048
 openssl req -new -key server.key -out server.csr
 cp server.key server.key.org
 openssl rsa -in server.key.org -out server.key
 openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

 2.4 运行脚本进行安装
 ./install.sh

 2.5 访问测试
 https://reg.yourdomain.com的管理员门户（将 reg.yourdomain.com更改为您的主机名 更 harbor.cfg）。请注意，默认管理员用户名/密码为 admin /Harbor12345

 2.6 上传镜像进行上传测试

   a、指定镜像仓库地址：
   vim /etc/docker/daemon.json
    {"insecure-registries": ["serverip"] }
   b、下载测试镜像 ： docker pull hello-world
   c、给镜像重新打标签 ： docker tag hello-world serverip/library/hello-world:latest 
   d、登录进行上传 ： docker login serverip

 2.7 其它, Docker客户端下载测试 
  a、指定镜像仓库地址 : 
  vim/etc/docker/daemon.json {"insecure-registries": ["serverip"] }

  b、下载测试镜像 : docker pull serverip/library/hello-world:latest



重启docker后，harbor服务挂掉重启：

cd /usr/local/harbor/

看到docker-compose.yml可知使用了docker-compose，可以使用后台启动的方式来实现harbor的开机启动功能

停止容器
docker-compose stop

后台启动容器
docker-compose up -d

------------------------------------------------------------------------------------------------------------------------

------------------------nfs----------------------------------

给共享目录添加权限：
    chown -R nfsnobody.nfsnobody /sharedir/
把NFS共享目录赋予 NFS默认用户nfsnobody用户和用户组权限，如不设置，会导致NFS客户端无法在挂载好的共享目录中写入数据

nfs挂载  mount -t nfs 10.18.129.161:/mnt/xfs /mnt/xfs

nfs客户端卸载挂载目录：
umount /mnt/xfs

客户端查看目录挂载情况：
df /mnt/xfs

nfs服务端卸载：
systemctl stop nfs-server
systemctl stop rpcbind.service / systemctl stop rpcbind.socket


nfs服务端开启nfs服务：
systemctl start nfs.service
systemctl start rpcbind.service


nfs服务端nfs服务状态查看：
systemctl status nfs.service
systemctl status rpcbind.service

NFS服务端配置：
vim /etc/exports
<输出目录> [客户端1 选项（访问权限,用户映射,其他）] [客户端2 选项（访问权限,用户映射,其他）]
/mnt/xfs         10.18.127.0/8(rw)

查看nfs服务器配置：
/mnt/xfs      	10.18.127.0/8

服务器端查询nfs共享状态：
showmount -e
# Export list for master:
# /mnt/xfs 10.18.127.0/8

NFS权限设定： TODO

--------------------------------------------------------------


--------------------------Python3 源码安装-------------------------------------
 
yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make libffi-devel

wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tar.xz

tar -xvf Python-3.7.2.tar.xz

#tar -zxvf Python-3.7.2.tar.gz

cd Python-3.7.2

#编译安装
./configure prefix=/usr/local/python3
make && make install

#安装后 /usr/local目录下会有python3


# 添加软链接
ln -sf /usr/local/python3/bin/python3.7 /usr/bin/python3

#ln -s /usr/local/python3/bin/python3.7 /usr/bin/python3

# 验证
python -V


安装第三方库
python3 -m pip -V
python3 -m pip install -y Pillow

-------------------------------------------------------------------------------


--------------------------Python3 非root用户 源码安装-------------------------------------

wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tar.xz
tar -xzf Python-3.7.2.tar.gz
cd Python-3.7.2
mkdir -p /home/xxx/software/python3.7
# 编译安装
./configure --prefix="/home/xxx/software/python3.7"
make
make install


vim ~/.bashrc
#添加该语句
alias python3=/home/xxx/software/python3.6/bin/python3.6
alias pip3=/home/xxx/software/python3.6/bin/pip3.6

source .bashrc

python3 -V
pip3 -V

---------------------------------------------------------------------------------------------


-------------------------------时间同步方式------------------------------------

docker run -it --cap-add SYS_TIME pipelineai/kubeflow-notebook-cpu-1.13.1:2.0.2 /bin/bash
|| docker run -it --privileged pipelineai/kubeflow-notebook-cpu-1.13.1:2.0.2 /bin/bash

apt-get -y update && apt-get install -y tzdata

yum install -y ntp

ntpdate ntp1.aliyun.com

ntpdate cn.pool.ntp.org

docker commit -a "wzy" -m "my apache" a404c6c174a2  mymysql:v1
-------------------------------------------------------------------------------


-----------------------------kubeflow notebook 镜像构建 Dockerfile------------------------

FROM pipelineai/kubeflow-notebook-cpu-1.13.1-timezone:2.0.2
ENV NB_PREFIX /
CMD ["sh","-c", "jupyter notebook --notebook-dir=/home/jovyan --ip=0.0.0.0 --no-browser --allow-root --port=8888 --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.allow_origin='*' --NotebookApp.base_url=${NB_PREFIX}"]

-------------------------------------------------------------------------------

-------------------------------ssh 免密登录-------------------------------------------
生成密钥对： ssh-keygen -t rsa -P ""
拷贝本机公钥到另一个节点authorized keys文件中 ssh-copy-id root@10.18.127.4
--------------------------------------------------------------------------------------

----------------------------------centos安装软件包------------------------------------
针对错误消息中的每个依赖包,执行命令repoquery --nvr --whatprovides   <依赖文件>,安装输出包, such as
repoquery --nvr --whatprovides libXss.so.1
### libXScrnSaver-1.2.2-6.1.el7
--------------------------------------------------------------------------------------

--------------------------------------打包/解压----------------------------------------------

gzip压缩命令:     tar -zcvf 归档路径 被打包路径.  (gun-zip压缩,后缀一般是.tar.gz)

bzip2压缩命令:   tar -jcvf  归档路径 被打包路径.  (bzip2压缩,后缀一般是.tar.bz2)

tar -jcvf  kubeasz.tar.bz2 kubeasz/


tar -xvf 归档文件路径   ---可拆tar/gzip/bzip2格式的包

gzip压缩命令：   tar -zxvf 归档文件路径   ---只可拆gzip格式的包

bzip2解压命令：  tar -jxvf 归档文件路径    ---只可拆bzip2格式的包
---------------------------------------------------------------------------------------------

-------------------------------------gcc 静态编译---------------------------------------------
gcc --static -o hello hello.c 报错:
/usr/bin/ld: cannot find -lc

静态编译时需要将所有的.a库链接到可执行文件中，所以需要libc静态库文件，在系统找查找glibc-static提示没有库文件
yum install -y glibc-static
----------------------------------------------------------------------------------------------
----------------------------------------查看firewall防火墙------------------------------------
# 查看firewall开放的端口
firewall-cmd --zone=public --list-ports

# 防火墙重启
systemctl restart firewalld

# 打开某个端口
firewall-cmd --zone=public --add-port=2375/tcp --permanent
firewall-cmd --reload

# 删除某个端口
firewall-cmd --zone=public --remove-port=2375/tcp --permanent
firewall-cmd --reload

# 关闭防火墙
systemctl stop firewalld

# 查看应用占用的端口
ss -tunlp | grep teamviewerd

----------------------------------------------------------------------------------------------

---------------------------yum 安装rpm解决依赖库------------------------
yum --nogpgcheck localinstall packagename.arch.rpm

rpm 卸载

首先查找安装：
rpm -qa | grep -i 软件名

然后卸载：
sudo rpm -e -- 包名


dpkg解决依赖库问题
## 添加路径很重要
sudo apt-get install ./packagename.arch.deb

dpkg卸载

dpkg -get-selections | grep 软件名

sudo apt-get remove -purge 软件名


-------------------------------------------------------------------------------------------------

---------------------------------hdfs ---------------------------------------------------------
hdfs 退出安全模式  hdfs dfsadmin -safemode leave
-----------------------------------------------------------------------------------------------

-----------------------------------网桥---------------------------------------------------
# 停止docker service
systemctl stop docker
 
#关闭docker0网卡(如果没有ifconfig，则需要先安装(yum install net-tools))
ifconfig docker0 down
 
#删除docker0网卡(如果没有brctl，则需要先安装(yum install bridge-utils))
brctl delbr docker0
------------------------------------------------------------------------------------------

-----------------------------------------时间同步------------------------------------------
# 如果没有date，则需要先安装date命令
yum install -y coreutils

# 安装ntpdate 
yum install -y ntpdate(NTP network time protocol)

# 时间同步
ntpdate ntp1.aliyun.com
------------------------------------------------------------------------------------------
-----------------------------------------sed----------------------------------------------
截取指定行之间的内容到新的文件中
sed -n '开始行数,结束行数p' 待截取文件 >> 保存的
------------------------------------------------------------------------------------------



-----------------------------------------编译源代码指定安装路径---------------------------------------
一般编译源代码三部曲
 ./configure
 make
 make install
 这种默认安装路径的话，会把可执行文件拷贝到/usr/local/bin，如果没有sudo权限的话是会失败的，有两种方法指定安装路径。
  一种是在./configure的时候指定路径
  ./configure --prefix=安装路径
  一种是make install的时候指定路径
  make install DESTDIR=安装路径
----------------------------------------------------------------------------------------------------


----------------------------------------CentOS7 源码编译QEMU 需要安装的依赖-------------------------------------------------------------
yum install -y epel-release
yum install centos-release-scl
yum install -y devtoolset-8-gcc*
yum install -y libaio-devel libcap-devel libiscsi-devel
yum install python36-devel -y
yum install -y ninja-build
yum install -y glib pixman-devel
yum install -y cmake3 zlib-devel
----------------------------------------------------------------------------------------------------



-------------------------------------vim tab转为space---------------------------------------------------------

set tabstop=4
set expandtab 用space替代tab的输入
%ret!4
-------------------------------------------------------------------------------------------------------------------------------------------------------------


--------------------------------------jupyter notebook------------------------------------------------------------------------------------------------
1、添加jupyter登录密码：
~$ jupyter notebook password
~$ cat .jupyter/jupyter_notebook_config.json 
{
  "NotebookApp": {
    "password": "sha1:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
 }

2、生成jupyter notebook 启动参数文件并修改参数
~$ jupyter notebook --generate-config
~$ vi .jupyter/jupyter_notebook_config.py

3、jupyter_notebook_config.py添加如下参数后，并保存：

c.NotebookApp.ip = '*'  #外部IP地址客户端可以访问
c.NotebookApp.notebook_dir = '/home/wzy/notebook-dir'  #本地notebook访问的目录
c.NotebookApp.open_browser = False   #jupyter notebook启用时不再本地默认打开浏览器
c.NotebookApp.port = 9999            #默认访问的端口是9999


4、直接启动notebook后台服务，并输出运行日志，之后就可以远程访问这个服务了
~$ jupyter notebook >.jupyter/jupyter_notebook.log 2>&1 &
[1] 10395

---------------------------------------------------------------------------------------------------------------------------------------------


------------------------------------------conda 环境-------------------------------------------------------------------------------------------

1、查看python环境
conda info --env 
 可以看到所有python环境，前面有*代表当前环境

2、创建环境

conda create --name python35 python=3.5 代表创建一个python3.5的环境，把它命名为python35

3、管理和使用python环境

source activate python35 来激活并使用刚才创建的环境

source deactivate 来退出当前激活的环境

4、 删除创建的环境 python35
conda remove -n python35 --all

----------------------------------------------------------------------------------------------------------------------------


---------------------------------jupyter notebook中添加conda环境------------------------------------------

1、首先安装ipykernel：conda install ipykernel

python3 -m ipykernel install --user --name fate-1.6.0 --display-name "fate-1.6.0"

---------------------------------------------------------------------------------------------------------------------------



---------------------------------------------------挂载磁盘------------------------------------------------

查看目录大小 df -lh

查看所有磁盘 fdisk -l

查看磁盘文件系统 parted -l

根据查到的磁盘文件格式来格式化磁盘 mkfs -t ext3/ext4  /dev/sdb

把格式化之后的磁盘挂载到文件目录上
mount /dev/sdb /home

再次查看磁盘挂载目录情况
df -lh

上面配置完重启之后还是需要手动挂载一次，所以需要添加开机自动挂载磁盘
vim /etc/fstab

在末尾添加
/dev/sdb  /home  ext4 defaults 0 0


列参数说明：
第五列是dump备份设置。

当其值设置为1时，将允许dump备份程序备份；设置为0时，忽略备份操作；

第六列是fsck磁盘检查设置。

其值是一个顺序。当其值为0时，永远不检查；而 /根目录分区永远都为1。其它分区从2开始，数字越小越先检查，如果两个分区的数字相同，则同时检查。

当修改完此文件并保存后，重启服务器生效。

------------------------------------------------------------------------------------------------------------------
